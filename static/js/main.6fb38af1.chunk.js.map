{"version":3,"sources":["Components/Main/Presentation/RowsPresentation/Square/index.js","Components/Main/Presentation/RowsPresentation/RowOfSquares/index.js","Components/Main/Presentation/RowsPresentation/index.js","Components/Main/Presentation/FormPresentation/index.js","Components/Main/Container/index.js","Components/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","i","color","numberOfSquares","style","background","borderColor","borderStyle","flexBasis","className","key","shortid","generate","RowOfSquares","orgArr","Squares","Array","fill","map","display","flexWrap","length","RowsPresentation","Rows","this","props","rows","Fragment","React","PureComponent","Form","onClick","onChange","formState","colorInput","numberOfSquaresInput","showRangeErrorMessage","name","id","value","type","min","max","disabled","Main","useState","setRows","setFormState","FormPresentation","e","Math","floor","target","val","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fb38af1.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./Square.css\"\r\nimport shortid from \"shortid\"\r\n\r\nconst Square = ({ color, numberOfSquares }, i) => {\r\n\tconst style = {\r\n\t\tbackground: color,\r\n\t\tborderColor: \"white\",\r\n\t\tborderStyle: \"solid\",\r\n\t\tflexBasis: `${100 / numberOfSquares}%`,\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\t{...{ style }}\r\n\t\t\tclassName=\"square\"\r\n\t\t\tkey={shortid.generate()}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Square","import React from \"react\"\r\nimport \"./RowOfSquares.css\"\r\nimport Square from \"../Square/\"\r\nimport shortid from \"shortid\"\r\n\r\nconst RowOfSquares = ({ color, numberOfSquares }, i, orgArr) => {\r\n\tconst style = {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexWrap: \"wrap\",\r\n\t}\r\n\r\n\tconst key = shortid.generate()\r\n\r\n\tconst Squares = Array(numberOfSquares)\r\n\t\t.fill({ color, numberOfSquares })\r\n\t\t.map(Square)\r\n\r\n\treturn (\r\n\t\t<div {...{\r\n\t\t\tkey,\r\n\t\t\tstyle,\r\n\t\t\tclassName: i >= orgArr.length - 1 ? \"fadeIn\" : \"\"\r\n\t\t}}\r\n\t\t>\r\n\t\t\t{Squares}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RowOfSquares","import React from 'react'\r\nimport RowOfSquares from './RowOfSquares/'\r\n\r\nclass RowsPresentation extends React.PureComponent {\r\n\trender() {\r\n\t\tconst Rows = this.props.rows.map(RowOfSquares)\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{Rows}\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default RowsPresentation","import React from 'react'\r\n\r\nconst Form = ({ onClick, onChange, formState }) => {\r\n\tconst {\r\n\t\tcolorInput,\r\n\t\tnumberOfSquaresInput,\r\n\t\tshowRangeErrorMessage,\r\n\t} = formState\r\n\r\n\treturn (\r\n\t\t<div className=\"gridContainer\">\r\n\t\t\t<div className=\"gridItem\">\r\n\t\t\t\t<label >Color</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tname=\"color\"\r\n\t\t\t\t\tid=\"colorInput\"\r\n\t\t\t\t\t{...{ onChange }}\r\n\t\t\t\t\tvalue={colorInput}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"Green\">Green</option>\r\n\t\t\t\t\t<option value=\"Blue\">Blue</option>\r\n\t\t\t\t\t<option value=\"Red\">Red</option>\r\n\t\t\t\t\t<option value=\"Yellow\">Yellow</option>\r\n\t\t\t\t\t<option value=\"Black\">Black</option>\r\n\t\t\t\t\t<option value=\"Purple\">Purple</option>\r\n\t\t\t\t\t<option value=\"Orange\">Orange</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"gridItem\">\r\n\t\t\t\t<label >Number of Squares</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tname=\"numberOfSquaresInput\"\r\n\t\t\t\t\tvalue={numberOfSquaresInput}\r\n\t\t\t\t\tid=\"numberOfSquaresInput\"\r\n\t\t\t\t\t{...{ onChange }}\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\tmax=\"30\"\r\n\t\t\t\t/>\r\n\t\t\t\t{showRangeErrorMessage &&\r\n\t\t\t\t\t<div className=\"gridContainer\" style={{ color: \"red\" }}>\r\n\t\t\t\t\t\t<div className=\"gridItem\">\r\n\t\t\t\t\t\t\tThe number inputed must be between 1 and 30\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"gridItem\">\r\n\t\t\t\t<button\r\n\t\t\t\t\t{...{ onClick }}\r\n\t\t\t\t\tdisabled={showRangeErrorMessage}\r\n\t\t\t\t>\r\n\t\t\t\t\tCreate New Row\r\n\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Form","import React, { useState } from 'react'\r\nimport RowsPresentation from '../Presentation/RowsPresentation'\r\nimport FormPresentation from '../Presentation/FormPresentation/'\r\n\r\nconst MainContainer = () => {\r\n\tconst initialRowState = [{\r\n\t\tcolor: \"green\",\r\n\t\tnumberOfSquares: 5,\r\n\t}]\r\n\tconst initialFormState = {\r\n\t\tcolorInput: \"Green\",\r\n\t\tnumberOfSquaresInput: 5,\r\n\t\tshowRangeErrorMessage: false,\r\n\t}\r\n\r\n\tconst [rows, setRows] = useState(initialRowState)\r\n\tconst [formState, setFormState] = useState(initialFormState)\r\n\r\n\tconst onChange = (e) => {\r\n\t\tconst id = e.target.id\r\n\t\tconst val = e.target.value\r\n\r\n\t\tif (\r\n\t\t\tid === \"numberOfSquaresInput\" &&\r\n\t\t\t(+val > 30.01 || +val < -0.01)\r\n\t\t) {\r\n\t\t\tsetFormState({\r\n\t\t\t\t...formState,\r\n\t\t\t\t[id]: val,\r\n\t\t\t\tshowRangeErrorMessage: true\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tsetFormState({\r\n\t\t\t\t...formState,\r\n\t\t\t\t[id]: val,\r\n\t\t\t\tshowRangeErrorMessage: false,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst onClick = (e) => setRows([\r\n\t\t...rows,\r\n\t\t{\r\n\t\t\tcolor: formState.colorInput,\r\n\t\t\tnumberOfSquares: Math.floor(+formState.numberOfSquaresInput) || 1,\r\n\t\t}\r\n\t])\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<RowsPresentation\r\n\t\t\t\t{...{ rows }}\r\n\t\t\t/>\r\n\r\n\t\t\t<FormPresentation\r\n\t\t\t\t{...{\r\n\t\t\t\t\tonClick,\r\n\t\t\t\t\tonChange,\r\n\t\t\t\t\tformState,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default MainContainer","import React from 'react'\r\nimport Main from './Main/Container'\r\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from './Components/'\nconst App = () => <Main />\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}